#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"

#pragma kernel ClusterCull

struct Vertex
{
    float3 Position;
    float3 Normal;
    float2 Texcoord;
    float4 Tangent;
};

struct ClusterCullData
{
    float4 BoundingSphere;
    uint NormalCone1;
    uint NormalCone2;
    uint NormalCone3;
    uint NormalCone4;
    uint ApexOffset;
};

cbuffer ConstantBuffer
{
    uint ClusterCount;
    uint LastClusterVertCount;
    uint LastClusterPrimCount;
}

struct Cluster
{
    uint VertCount;
    uint VertOffset;
    uint PrimCount;
    uint PrimOffset;
};


//Input
StructuredBuffer<Vertex>                     VertexBuffer;
StructuredBuffer<uint>                       IndexBuffer;
StructuredBuffer<Cluster>                    ClusterBuffer;
StructuredBuffer<uint3>                      ClusterPrimitiveBuffer;
StructuredBuffer<ClusterCullData>            CullDataBuffer;

//Output
AppendStructuredBuffer<Cluster>              CullResultClusterBuffer;
AppendStructuredBuffer<uint3>                CullResultPrimitiveBuffer;
RWStructuredBuffer<uint4>                    CullResultArgsBuffer;

// uint3 UnpackPrimitive(uint primitive)
// {
//     // Unpacks a 10 bits per index triangle from a 32-bit uint.
//     return uint3(primitive & 0x3FF, (primitive >> 10) & 0x3FF, (primitive >> 20) & 0x3FF);
// }

// uint3 GetPrimitive(Cluster cluster, uint index)
// {
//     return UnpackPrimitive(ClusterIndexBuffer[cluster.PrimOffset + index]);
// }

// uint GetVertexIndex(Cluster cluster, uint localIndex)
// {
//     localIndex = cluster.VertOffset + localIndex;

//     return IndexBuffer.Load(localIndex * 4);
// }

//SV_GroupIndex : 0 - (ClusterCount - 1)
//SV_GroupID : Primitive[128]
[numthreads(128, 1, 1)]
void ClusterCull(uint3 id : SV_GroupThreadID, uint gtid : SV_GroupIndex, uint gid : SV_GroupID)
{
    //Cluster cluster = ClusterBuffer[gid];
    CullResultClusterBuffer.Append(ClusterBuffer[gtid]);
    CullResultPrimitiveBuffer.Append(ClusterPrimitiveBuffer[id.x]);
    // CullResultArgsBuffer[0] = float4(3 * 128, 2263, 0, 0);


    //CullResultIndexBuffer.Append(IndexBuffer.Consume());
    //CullResultIndexBuffer.Append(IndexBuffer[id.x]);
}
