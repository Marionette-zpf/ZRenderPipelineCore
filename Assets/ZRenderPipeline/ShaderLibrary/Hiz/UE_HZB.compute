// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel HZBBuildCS DIM_MIP_LEVEL_COUNT=1 
#pragma kernel HZBBuildCS DIM_MIP_LEVEL_COUNT=2
#pragma kernel HZBBuildCS DIM_MIP_LEVEL_COUNT=3
#pragma kernel HZBBuildCS DIM_MIP_LEVEL_COUNT=4

#pragma kernel HZBBuildCS DIM_MIP_LEVEL_COUNT=1 TEXTURE_RW_MIP
#pragma kernel HZBBuildCS DIM_MIP_LEVEL_COUNT=2 TEXTURE_RW_MIP
#pragma kernel HZBBuildCS DIM_MIP_LEVEL_COUNT=3 TEXTURE_RW_MIP
#pragma kernel HZBBuildCS DIM_MIP_LEVEL_COUNT=4 TEXTURE_RW_MIP

#define DIM_FURTHEST 1
#define DIM_CLOSEST 0

#define MAX_MIP_BATCH_SIZE 4
#define GROUP_TILE_SIZE 8

float4 DispatchThreadIdToBufferUV;
float4 InvSize;
float4 InputViewportMaxBound;

SamplerState sampler_PointClamp;

Texture2D ParentTextureMip; RWTexture2D<float> RWParentTextureMip;

RWTexture2D<float> FurthestHZBOutput_0;
RWTexture2D<float> FurthestHZBOutput_1;
RWTexture2D<float> FurthestHZBOutput_2;
RWTexture2D<float> FurthestHZBOutput_3;

RWTexture2D<float> ClosestHZBOutput_0;
RWTexture2D<float> ClosestHZBOutput_1;
RWTexture2D<float> ClosestHZBOutput_2;
RWTexture2D<float> ClosestHZBOutput_3;

groupshared float SharedFurthestDeviceZ[GROUP_TILE_SIZE  *  GROUP_TILE_SIZE];
groupshared float SharedClosestDeviceZ[GROUP_TILE_SIZE  *  GROUP_TILE_SIZE];

float4 Gather4(Texture2D Texture, SamplerState TextureSampler, float2 BufferUV)
{
	float2 UV[4];
	
	// min(..., InputViewportMaxBound) because we don't want to sample outside of the viewport
	// when the view size has odd dimensions on X/Y axis.
	UV[0] = min(BufferUV + float2(-0.25f, -0.25f) * InvSize.xy, InputViewportMaxBound.xy);
	UV[1] = min(BufferUV + float2( 0.25f, -0.25f) * InvSize.xy, InputViewportMaxBound.xy);
	UV[2] = min(BufferUV + float2(-0.25f,  0.25f) * InvSize.xy, InputViewportMaxBound.xy);
	UV[3] = min(BufferUV + float2( 0.25f,  0.25f) * InvSize.xy, InputViewportMaxBound.xy);

	float4 Out;
	Out.x = Texture.SampleLevel(TextureSampler, UV[0], 0 ).r;
	Out.y = Texture.SampleLevel(TextureSampler, UV[1], 0 ).r;
	Out.z = Texture.SampleLevel(TextureSampler, UV[2], 0 ).r;
	Out.w = Texture.SampleLevel(TextureSampler, UV[3], 0 ).r;

	return Out;
}

float4 Gather4RW(RWTexture2D<float> RWTexture, uint2 Coord)
{
	uint2 UV[4];

	UV[0] = Coord;
	UV[1] = min(Coord + uint2(1, 0), InputViewportMaxBound.zw);
	UV[2] = min(Coord + uint2(0, 1), InputViewportMaxBound.zw);
	UV[3] = min(Coord + uint2(1, 1), InputViewportMaxBound.zw);


	float4 Out;
	Out.x = RWTexture[UV[0]];
	Out.y = RWTexture[UV[1]];
	Out.z = RWTexture[UV[2]];
	Out.w = RWTexture[UV[3]];

	return Out;
}

uint SignedRightShift(uint x, const int bitshift)
{
	if (bitshift > 0)
	{
		return x << asuint(bitshift);
	}
	else if (bitshift < 0)
	{
		return x >> asuint(-bitshift);
	}
	return x;
}

uint2 InitialTilePixelPositionForReduction2x2(const uint TileSizeLog2, uint SharedArrayId)
{
	uint x = 0;
	uint y = 0;

	[unroll]
	for (uint i = 0; i < TileSizeLog2; i++)
	{
		const uint DestBitId = TileSizeLog2 - 1 - i;
		const uint DestBitMask = 1 << DestBitId;
		x |= DestBitMask & SignedRightShift(SharedArrayId, int(DestBitId) - int(i * 2 + 0));
		y |= DestBitMask & SignedRightShift(SharedArrayId, int(DestBitId) - int(i * 2 + 1));
	}

	return uint2(x, y);
}

uint2 InitialTilePixelPositionForReduction2x2(const uint TileSizeLog2, const uint ReduceCount, uint SharedArrayId)
{
	uint2 p = InitialTilePixelPositionForReduction2x2(ReduceCount, SharedArrayId);

	SharedArrayId = SharedArrayId >> (2 * ReduceCount);

	const uint RemainingSize = 1 << (TileSizeLog2 - ReduceCount);

	p.x |= ((SharedArrayId % RemainingSize) << ReduceCount);
	p.y |= ((SharedArrayId / RemainingSize) << ReduceCount);

	return p;
}

void OutputMipLevel(uint MipLevel, uint2 OutputPixelPos, float FurthestDeviceZ, float ClosestDeviceZ)
{
	#if DIM_MIP_LEVEL_COUNT >= 2
	if (MipLevel == 1)
	{
		#if DIM_FURTHEST
			FurthestHZBOutput_1[OutputPixelPos] = FurthestDeviceZ;
		#endif
		#if DIM_CLOSEST
			ClosestHZBOutput_1[OutputPixelPos] = ClosestDeviceZ;
		#endif
	}
	#endif
	#if DIM_MIP_LEVEL_COUNT >= 3
	else if (MipLevel == 2)
	{
		#if DIM_FURTHEST
			FurthestHZBOutput_2[OutputPixelPos] = FurthestDeviceZ;
		#endif
		#if DIM_CLOSEST
			ClosestHZBOutput_2[OutputPixelPos] = ClosestDeviceZ;
		#endif
	}
	#endif
	#if DIM_MIP_LEVEL_COUNT >= 4
	else if (MipLevel == 3)
	{
		#if DIM_FURTHEST
			FurthestHZBOutput_3[OutputPixelPos] = FurthestDeviceZ;
		#endif
		#if DIM_CLOSEST
			ClosestHZBOutput_3[OutputPixelPos] = ClosestDeviceZ;
		#endif
	}		
	#endif
}

[numthreads(GROUP_TILE_SIZE, GROUP_TILE_SIZE, 1)]
void HZBBuildCS(uint2 GroupId : SV_GroupID, uint GroupThreadIndex : SV_GroupIndex)
{
	#if DIM_MIP_LEVEL_COUNT == 1
		uint2 GroupThreadId = uint2(GroupThreadIndex % GROUP_TILE_SIZE, GroupThreadIndex / GROUP_TILE_SIZE);
	#else
		uint2 GroupThreadId = InitialTilePixelPositionForReduction2x2(MAX_MIP_BATCH_SIZE - 1, GroupThreadIndex);
	#endif

	uint2 DispatchThreadId = GROUP_TILE_SIZE * GroupId + GroupThreadId;

	float2 BufferUV = (DispatchThreadId + 0.5) * DispatchThreadIdToBufferUV.xy + DispatchThreadIdToBufferUV.zw;

	#if TEXTURE_RW_MIP
		float4 DeviceZ = Gather4RW(RWParentTextureMip, DispatchThreadId * 2);
	#else
		float4 DeviceZ = Gather4(ParentTextureMip, sampler_PointClamp, BufferUV);
	#endif

	float FurthestDeviceZ = min(min(DeviceZ.x, DeviceZ.y), min(DeviceZ.z, DeviceZ.w));
	float ClosestDeviceZ = max(max(DeviceZ.x, DeviceZ.y), max(DeviceZ.z, DeviceZ.w));
	
	uint2 OutputPixelPos = DispatchThreadId;
	
	#if DIM_FURTHEST
		FurthestHZBOutput_0[OutputPixelPos] = FurthestDeviceZ;
	#endif
	
	#if DIM_CLOSEST
		ClosestHZBOutput_0[OutputPixelPos] = ClosestDeviceZ;
	#endif

	#if DIM_MIP_LEVEL_COUNT == 1
	{
		// NOP
	}
	#else
	{
		SharedFurthestDeviceZ[GroupThreadIndex] = FurthestDeviceZ;
		SharedClosestDeviceZ[GroupThreadIndex] = ClosestDeviceZ;
	
		[unroll]
		for (uint MipLevel = 1; MipLevel < DIM_MIP_LEVEL_COUNT; MipLevel++)
		{
			const uint TileSize = GROUP_TILE_SIZE / (1 << MipLevel);
			const uint ReduceBankSize = TileSize * TileSize;
			
			// LDS has been written before.
			if (MipLevel == 1)
				GroupMemoryBarrierWithGroupSync();

			[branch]
			if (GroupThreadIndex < ReduceBankSize)
			{
				float4 ParentFurthestDeviceZ;
				float4 ParentClosestDeviceZ;
				ParentFurthestDeviceZ[0] = FurthestDeviceZ;
				ParentClosestDeviceZ[0] = ClosestDeviceZ;

				[unroll]
				for (uint i = 1; i < 4; i++)
				{
					uint LDSIndex = GroupThreadIndex + i * ReduceBankSize;
					ParentFurthestDeviceZ[i] = SharedFurthestDeviceZ[LDSIndex];
					ParentClosestDeviceZ[i] = SharedClosestDeviceZ[LDSIndex];
				}
				
				FurthestDeviceZ = min(min(ParentFurthestDeviceZ.x, ParentFurthestDeviceZ.y), min(ParentFurthestDeviceZ.z, ParentFurthestDeviceZ.w));
				ClosestDeviceZ  = max(max(ParentClosestDeviceZ.x,  ParentClosestDeviceZ.y),  max(ParentClosestDeviceZ.z,  ParentClosestDeviceZ.w));
	
				OutputPixelPos = OutputPixelPos >> 1;
				OutputMipLevel(MipLevel, OutputPixelPos, FurthestDeviceZ, ClosestDeviceZ);
				
				SharedFurthestDeviceZ[GroupThreadIndex] = FurthestDeviceZ;
				SharedClosestDeviceZ[GroupThreadIndex] = ClosestDeviceZ;
			}
		} // for (uint MipLevel = 1; MipLevel < DIM_MIP_LEVEL_COUNT; MipLevel++)
	}
	#endif
}